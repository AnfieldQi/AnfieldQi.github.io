<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IOT on AnfieldQi`s Blog</title>
    <link>http://anfieldqi.top/tags/iot/</link>
    <description>Recent content in IOT on AnfieldQi`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 27 Aug 2020 20:27:02 +0800</lastBuildDate>
    
	<atom:link href="http://anfieldqi.top/tags/iot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kyland_sensitive information disclosure vulnerability</title>
      <link>http://anfieldqi.top/2020/kyland_2/</link>
      <pubDate>Thu, 27 Aug 2020 20:27:02 +0800</pubDate>
      
      <guid>http://anfieldqi.top/2020/kyland_2/</guid>
      <description>Below we briefly describe the vulnerability verification process with a simple example. In kyland&amp;rsquo;s http service, when we audit its webadminget.cgi file, there is an instruction to print the password. The source code is as follows: We request the cgi script through the browser. The details are shown in the following figure. You can see that the user name and password are all displayed in plain text, so there is</description>
    </item>
    
    <item>
      <title>Vulnerability verification for Kyland</title>
      <link>http://anfieldqi.top/2020/kyland_test/</link>
      <pubDate>Thu, 27 Aug 2020 19:17:39 +0800</pubDate>
      
      <guid>http://anfieldqi.top/2020/kyland_test/</guid>
      <description>Below we briefly describe the vulnerability verification process with a simple example. Run the firmware to be tested in the simulation environment, we open its http service, and the running script is in /sbin/httpd or run the device directly Then we use the browser to request the http service of the firmware. There are many interactive interfaces found among them. Find its html source code and cgi script by viewing</description>
    </item>
    
    <item>
      <title>《A Large-Scale Analysis of the Security of Embedded Firmwares》</title>
      <link>http://anfieldqi.top/2020/a_large_analysis/</link>
      <pubDate>Wed, 01 Jul 2020 16:01:14 +0800</pubDate>
      
      <guid>http://anfieldqi.top/2020/a_large_analysis/</guid>
      <description>1.题目 A Large-Scale Analysis of the Security of Embedded Firmwares 2.主要内容 这是一篇时间上相对来说比较靠前的文章，主要介绍了针对固件镜像的大规模分析项目。具体为将32000个固件</description>
    </item>
    
    <item>
      <title>IoTFuzzer_note</title>
      <link>http://anfieldqi.top/2020/iotfuzzer_note/</link>
      <pubDate>Thu, 11 Jun 2020 09:54:58 +0800</pubDate>
      
      <guid>http://anfieldqi.top/2020/iotfuzzer_note/</guid>
      <description>1.题目 IOTFUZZER: Discovering Memory Corruptions in IoT Through App-based Fuzzing 2.主要内容 目前IOT安全检测使用的大部分是基于二进制分析的，分析的前提是获取到固件的镜像，但是镜像提取是一个问题</description>
    </item>
    
  </channel>
</rss>